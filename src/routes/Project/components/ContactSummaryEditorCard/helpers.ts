import { useState } from "react";
import { AnyRule, BooleanRule, CountRule, LastValueRule, SummaryConfig } from "./types";

export const uid = () => {
    return Math.random().toString(36).slice(2, 10);
}

export const validateRule = (r: AnyRule): string[] => {
    const errs: string[] = [];
    if (!r.key) errs.push("Key is required");
    if (!/^[_a-zA-Z][_a-zA-Z0-9]*$/.test(r.key)) errs.push("Key must be a JS identifier (a-z, 0-9, _)");
    if (r.type === "last_value") {
        const rr = r as LastValueRule;
        if (!rr.form) errs.push("Form code is required");
        if (!rr.path) errs.push("Field path is required");
    }
    if (r.type === "count") {
        const rr = r as CountRule;
        if (!rr.form) errs.push("Form code is required");
    }
    if (r.type === "boolean") {
        const rr = r as BooleanRule;
        if (!rr.logic) errs.push("Logic expression is required");
    }
    return errs;
}

export const generateContactSummaryJS = (config: SummaryConfig): string => {
    const header = `// Auto-generated by Studio Contact-Summary Editor\n// context: { contact, reports, lineage, user, utils }\nmodule.exports = function(context) {\n  const { contact, reports, utils } = context;\n\n  function isWithinDays(report, days) {\n    if (!days) return true;\n    const ms = days * 24 * 60 * 60 * 1000;\n    return (Date.now() - (report.reported_date || 0)) <= ms;\n  }\n\n  const latest = arr => (arr && arr.length) ? arr.slice().sort((a,b) => (b.reported_date||0) - (a.reported_date||0))[0] : null;\n\n`;

    const bodyLines: string[] = [];

    config.fields.forEach((rule) => {
        if (rule.type === "last_value") {
            const r = rule as LastValueRule;
            bodyLines.push(
                `  // ${r.key}: last_value from ${r.form}.${r.path}${r.withinDays ? ` within ${r.withinDays}d` : ""}`,
                `  const __${r.key}_reports = reports.filter(r => r.form === ${JSON.stringify(
                    r.form
                )} && isWithinDays(r, ${r.withinDays ?? "undefined"}));`,
                `  const __${r.key}_latest = latest(__${r.key}_reports);`,
                `  const ${r.key} = __${r.key}_latest ? utils.get(${`__${r.key}_latest`}, ${JSON.stringify(
                    r.path
                )}) : null;`,
                ""
            );
        }
        if (rule.type === "count") {
            const r = rule as CountRule;
            bodyLines.push(
                `  // ${r.key}: count of ${r.form}${r.where ? ` where (${r.where})` : ""}${r.withinDays ? ` within ${r.withinDays}d` : ""
                }`,
                `  const ${r.key} = reports.filter(r => r.form === ${JSON.stringify(
                    r.form
                )} && isWithinDays(r, ${r.withinDays ?? "undefined"})${r.where ? ` && (${r.where})` : ""}).length;`,
                ""
            );
        }
        if (rule.type === "boolean") {
            const r = rule as BooleanRule;
            bodyLines.push(
                `  // ${r.key}: boolean`,
                `  const ${r.key} = !!(function(reports, contact, utils){ try { return (${r.logic}); } catch(e){ return false; } })(reports, contact, utils);`,
                ""
            );
        }
    });

    const footer = `  return {\n    context: {\n${config.fields
        .map((f) => `      ${f.key}: ${f.key}`)
        .join(",\n")}\n    }\n  };\n};\n`;

    return header + bodyLines.join("\n") + footer;
}

// export const ContactSummaryPreview = ({ js }: { js: string }) => {
//     const [contactJson, setContactJson] = useState<string>(JSON.stringify({
//         _id: "person-001",
//         name: "Jane Doe",
//         patient_id: "P-123",
//     }, null, 2));

//     const [reportsJson, setReportsJson] = useState<string>(JSON.stringify([
//         { _id: "r1", form: "bp", reported_date: Date.now() - 3 * 24 * 60 * 60 * 1000, fields: { systolic: 148, diastolic: 96 } },
//         { _id: "r2", form: "bp", reported_date: Date.now() - 40 * 24 * 60 * 60 * 1000, fields: { systolic: 132, diastolic: 84 } },
//         { _id: "r3", form: "anc_visit", reported_date: Date.now() - 10 * 24 * 60 * 60 * 1000, fields: { completed: true } },
//         { _id: "r4", form: "dx", reported_date: Date.now() - 200 * 24 * 60 * 60 * 1000, fields: { dx_code: "E11" } }
//     ], null, 2));

//     const [output, setOutput] = useState<string>("(no run yet)");
//     const [error, setError] = useState<string>("");

//     function safeEvalModule(code: string) {
//         const module: any = { exports: {} };
//         const exports: any = module.exports;
//         const fakeRequire = (name: string) => { throw new Error(`require('${name}') is disabled in preview`); };
//         // eslint-disable-next-line no-new-func
//         const factory = new Function("module", "exports", "require", code + "; return module.exports; ");
//         return factory(module, exports, fakeRequire);
//     }

//     function run() {
//         setError("");
//         try {
//             const contact = JSON.parse(contactJson);
//             const reports = JSON.parse(reportsJson);

//             const utils = {
//                 get(obj: any, path: string) {
//                     return path.split('.').reduce((acc: any, key: string) => (acc ? acc[key] : undefined), obj);
//                 },
//             };

//             const exported = safeEvalModule(js);
//             if (typeof exported !== 'function') throw new Error("Generated script did not export a function");
//             const result = exported({ contact, reports, lineage: [], user: {}, utils });
//             setOutput(JSON.stringify(result, null, 2));
//         } catch (e: any) {
//             setError(e?.message || String(e));
//             setOutput("");
//         }
//     }

//     return (
//         <div className= "space-y-3" >
//         <div className="grid grid-cols-1 lg:grid-cols-2 gap-3" >
//             <div>
//             <Label>Contact(JSON) </Label>
//             < Textarea rows = { 12} className = "font-mono text-xs" value = { contactJson } onChange = {(e: any) => setContactJson(e.target.value)} />
//                 </div>
//                 < div >
//                 <Label>Reports(JSON array) </Label>
//                 < Textarea rows = { 12} className = "font-mono text-xs" value = { reportsJson } onChange = {(e: any) => setReportsJson(e.target.value)} />
//                     </div>
//                     </div>
//                     < div className = "flex items-center gap-2" >
//                         <Button onClick={ run }> <Play className="w-4 h-4 mr-2" /> Run Preview </Button>
// { error && <span className="text-red-600 text-sm" > { error } </span> }
// </div>
//     < div >
//     <Label>Output </Label>
//     < Textarea readOnly rows = { 12} className = "font-mono text-xs" value = { output } />
//         </div>
//         < p className = "text-xs text-muted-foreground" > In forms, reference e.g. < code > instance('contact-summary') / context /& lt; key & gt; </code>.</p >
//             </div>
//     );
// }